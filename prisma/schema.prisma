generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  username        String?
  gh_username     String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime         @updatedAt
  role            String           @default("OWNER_ADMIN")
  apiToken        String?          @unique
  hasOnboarded    Boolean          @default(false)
  accounts        Account[]
  marketDataFiles MarketDataFile[]
  sessions        Session[]
  dataOwnerId     String?
  dataOwner       DataOwner?       @relation(fields: [dataOwnerId], references: [id])
  dataCustomerId  String?
  dataCustomer    DataCustomer?    @relation(fields: [dataCustomerId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DataOwner {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  logo                 String?
  createdAt            DateTime?              @default(now())
  emailDomain          String?                @unique
  dataContracts        DataContract[]
  marketDataSources    MarketDataSource[]
  users                User[]
  CustomerRelationship CustomerRelationship[]
}

model DataCustomer {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  logo                 String?
  createdAt            DateTime?              @default(now())
  emailDomain          String?                @unique
  dataContracts        DataContract[]
  users                User[]
  CustomerRelationship CustomerRelationship[]
}

model CustomerRelationship {
  id             String       @id @default(cuid())
  dataCustomerId String
  dataCustomer   DataCustomer @relation(fields: [dataCustomerId], references: [id])
  dataOwnerId    String
  dataOwner      DataOwner    @relation(fields: [dataOwnerId], references: [id])
  createdAt      DateTime?    @default(now())
}

model DataContract {
  id                 String           @id @default(cuid())
  buyerOrgId         String
  sellerOrgId        String
  startDate          DateTime?
  endDate            DateTime?
  allowDownload      Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  contractAmount     Float
  contractCurrency   String           @default("USD")
  marketDataSourceId String
  dataOwnerId        String?
  dataCustomerId     String?
  dataOwner          DataOwner?       @relation(fields: [dataOwnerId], references: [id])
  dataCustomer       DataCustomer?    @relation(fields: [dataCustomerId], references: [id])
  marketDataSource   MarketDataSource @relation(fields: [marketDataSourceId], references: [id])
}

model MarketDataFile {
  id                 String           @id @default(cuid())
  name               String
  file               String
  contentType        String
  uploaderId         String
  createdAt          DateTime?        @default(now())
  marketDataSourceId String
  marketDataSource   MarketDataSource @relation(fields: [marketDataSourceId], references: [id])
  uploadedByUser     User             @relation(fields: [uploaderId], references: [id])
}

model MarketDataSource {
  id              String           @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime?        @default(now())
  dataContracts   DataContract[]
  marketDataFiles MarketDataFile[]
  DataOwner       DataOwner?       @relation(fields: [dataOwnerId], references: [id])
  dataOwnerId     String?
}
