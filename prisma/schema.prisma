generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  username       String? // if you are using Github OAuth, you can get rid of the username attribute (that is for Twitter OAuth)
  gh_username    String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  role           String        @default("OWNER_ADMIN")
  accounts       Account[] // User can have multiple Accounts (these are the OAuth accounts)
  agreements     Agreement[]
  sessions       Session[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                  String                 @id @default(cuid())
  name                String
  description         String?
  logo                String?
  createdAt           DateTime               @default(now())
  role                OrganizationRole       @default(BUYER)
  users               User[]
  agreements          Agreement[]
  buyerRelationships  CustomerRelationship[] @relation("BuyerRelationships")
  sellerRelationships CustomerRelationship[] @relation("SellerRelationships")
}

enum OrganizationRole {
  BUYER
  SELLER
  BUYER_SELLER
  ZEPHYR
}

model CustomerRelationship {
  id                 String       @id @default(cuid())
  buyerOrgId         String // The ID of the buying organization
  sellerOrgId        String // The ID of the selling organization
  createdAt          DateTime     @default(now()) // When this relationship was established
  buyerOrganization  Organization @relation("BuyerRelationships", fields: [buyerOrgId], references: [id])
  sellerOrganization Organization @relation("SellerRelationships", fields: [sellerOrgId], references: [id])

  @@unique([buyerOrgId, sellerOrgId])
}

model Agreement {
  id             String        @id @default(cuid())
  name           String
  description    String?
  file           String // URL file location (S3, Vercel blob, etc.)
  contentType    String // Content Type of uploaded agreement (e.g. application/pdf, plain/text, etc.)
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  ownerId        String // This field holds the foreign key.
  owner          User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@index([ownerId])
}
