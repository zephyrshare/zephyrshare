generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  username        String?
  gh_username     String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime         @updatedAt
  role            String           @default("OWNER_ADMIN")
  organizationId  String?
  apiToken        String?          @unique
  accounts        Account[]
  marketDataFiles MarketDataFile[]
  sessions        Session[]
  organization    Organization?    @relation(fields: [organizationId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                  String             @id @default(cuid())
  name                String
  description         String?
  logo                String?
  createdAt           DateTime?          @default(now())
  role                OrganizationRole   @default(SELLER)
  emailDomain         String?            @unique
  buyerDataContracts  DataContract[]     @relation("BuyerDataContracts")
  sellerDataContracts DataContract[]     @relation("SellerDataContracts")
  marketDataFiles     MarketDataFile[]
  marketDataSources   MarketDataSource[]
  users               User[]
}

model DataContract {
  id                 String           @id @default(cuid())
  marketDataSourceId String
  buyerOrgId         String
  sellerOrgId        String
  startDate          DateTime?
  endDate            DateTime?
  allowDownload      Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  contractAmount     Float
  buyerOrganization  Organization     @relation("BuyerDataContracts", fields: [buyerOrgId], references: [id])
  marketDataSource   MarketDataSource @relation(fields: [marketDataSourceId], references: [id])
  sellerOrganization Organization     @relation("SellerDataContracts", fields: [sellerOrgId], references: [id])
}

model MarketDataFile {
  id                 String           @id @default(cuid())
  name               String
  file               String
  contentType        String
  uploaderId         String
  organizationId     String
  createdAt          DateTime?        @default(now())
  marketDataSourceId String
  marketDataSource   MarketDataSource @relation(fields: [marketDataSourceId], references: [id])
  organization       Organization     @relation(fields: [organizationId], references: [id])
  uploader           User             @relation(fields: [uploaderId], references: [id])
}

model MarketDataSource {
  id              String           @id @default(cuid())
  name            String
  description     String?
  organizationId  String
  createdAt       DateTime?        @default(now())
  dataContracts   DataContract[]
  marketDataFiles MarketDataFile[]
  organization    Organization     @relation(fields: [organizationId], references: [id])
}

enum OrganizationRole {
  BUYER
  SELLER
  BUYER_SELLER
  ZEPHYR
}
