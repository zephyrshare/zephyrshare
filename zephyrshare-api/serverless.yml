org: andrewheekin
app: zephyrshare-api
service: zephyrshare-api
frameworkVersion: '3'

custom:
  userTableName: 'zephyr-user-${sls:stage}'
  fileTableName: 'zephyr-file-${sls:stage}'
  bucketName: 'zephyrshare-${sls:stage}' # Bucket name must be globally unique across all AWS accounts

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: '*' # TODO: restrict to specific table(s)
            # - Fn::GetAtt: [ UserTable, Arn ] # TODO: debug why this doesn't work
        - Effect: Allow
          Action:
            - 's3:*' # Example: Grant broad S3 actions  # TODO: narrow down to specific actions for prod deployment
          Resource: '*' # TODO: restrict to specific bucket(s)
            # - arn:aws:s3:::zephyr-${sls:stage}/* # Bucket + objects within # TODO: debug why this doesn't work
  environment:
    USER_TABLE: ${self:custom.userTableName}
    FILE_TABLE: ${self:custom.fileTableName}
    S3_BUCKET: ${self:custom.bucketName}

functions:   # TODO: convert these to Lambda@Edge
  file-upload:
    handler: handlers/file/file-upload.main
    description: Upload a file
    events:
      - httpApi:
         method: POST
         path: /file/upload
         cors: true
  file-download:
    handler: handlers/file/file-download.main
    description: Download a file
    events:
      - httpApi:
         method: GET
         path: /file/download
         cors: true
  file-delete:
    handler: handlers/file/file-delete.main
    description: Delete a file
    events:
      - httpApi:
         method: DELETE
         path: /file/{fileId}
         cors: true
  user-signup:
    handler: handlers/user/user-signup.main
    description: Signup a new user
    events:
      - httpApi:
         method: POST
         path: /user/signup

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: apiKey
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.userTableName}
        GlobalSecondaryIndexes: 
          - IndexName: apiKey-index
            KeySchema: 
              - AttributeName: apiKey
                KeyType: HASH 
            Projection: # Project all attributes for flexibility
              ProjectionType: ALL
    FileTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: fileId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: fileId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.fileTableName}
        GlobalSecondaryIndexes: 
          - IndexName: userId-index
            KeySchema: 
              - AttributeName: userId
                KeyType: HASH 
            Projection: # Project all attributes for flexibility
              ProjectionType: ALL
    ZephyrFileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}


